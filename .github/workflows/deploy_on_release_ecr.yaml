name: model-deploy-on-release
on:
  release:
    types: 
      - 'created'
  # push:
  #   branches:
  #     - master
# build and push docker image to ECR
env:
  REGION: ap-southeast-1
  IMAGE_NAME: news_recommender

jobs:
  build_and_push:
    name: Build and Push docker image to ECR
    runs-on: ubuntu-latest
    outputs: 
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Get meta info
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha

      - name: Build docker image
        id: build-image
        run: |
          echo "image name: ${{ steps.meta.outputs.tags }}"
          echo "*******img: ${{ env.IMAGE_NAME }}"
          docker build -t ${{ steps.meta.outputs.tags }} .
          # echo "::set-output name=tags::${{ steps.meta.outputs.tags }}"
          # echo "::set-output name=json_tag::\"${{ steps.meta.outputs.tags }}\""
      
      - name: Push image to Amazon ECR
        id: push-image
        env:
          IMAGE_URL: ${{ steps.meta.outputs.tags }}
        run: |
          # push image to ECR so that it can
          # be deployed to ECS.
          docker push $IMAGE_URL
          # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          # echo "::set-output name=tag::$IMAGE_TAG"
          # echo "::set-output name=json_tag::\"$IMAGE_TAG\""


            